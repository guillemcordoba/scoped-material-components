{"version":3,"file":"global.js","sourceRoot":"","sources":["../src/global.ts"],"names":[],"mappings":"AAEA,MAAM,UAAU,oBAAoB,CAClC,QAAmE;IAEnE,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QACvC,MAAM,OAAO,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC9B,IAAK,OAAoC,CAAC,cAAc,EAAE;YACxD,oBAAoB,CACjB,OAAoC,CAAC,cAAc,CACrD,CAAC;SACH;QAED,MAAM,eAAe,GAAG,MAAM,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QACvD,IAAI,eAAe,KAAK,QAAQ,CAAC,GAAG,CAAC;YACnC,MAAM,IAAI,KAAK,CACb,8FAA8F,CAC/F,CAAC;QACJ,MAAM,CAAC,cAAc,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;KAClD;AACH,CAAC","sourcesContent":["import { Dictionary, ScopedElementConstructor } from \"./types\";\n\nexport function defineGlobalElements(\n  elements: Dictionary<ScopedElementConstructor | typeof HTMLElement>\n) {\n  for (const tag of Object.keys(elements)) {\n    const element = elements[tag];\n    if ((element as ScopedElementConstructor).scopedElements) {\n      defineGlobalElements(\n        (element as ScopedElementConstructor).scopedElements\n      );\n    }\n\n    const existingElement = window.customElements.get(tag);\n    if (existingElement !== elements[tag])\n      throw new Error(\n        \"Trying to redefine already existing element with a different class: try scoping the elements\"\n      );\n    window.customElements.define(tag, elements[tag]);\n  }\n}\n"]}